// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SchemaResolver file and http resolver resolves local schema with remote ref 1`] = `
Array [
  Object {
    "$id": "http://supermodel.io/test/FromLocal",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "properties": Object {
      "name": Object {
        "type": "string",
      },
    },
    "title": "FromLocal Schema",
    "type": "object",
  },
  Object {
    "$id": "http://supermodel.io/test/LocalToRemoteRef",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "properties": Object {
      "remote": Object {
        "$ref": "http://supermodel.io/test/FromLocal",
      },
    },
    "title": "LocalToRemoteRef Schema",
    "type": "object",
  },
]
`;

exports[`SchemaResolver file resolver resolves circular schema 1`] = `
Array [
  Object {
    "$id": "http://supermodel.io/test/Circular1",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Circular1 Schema",
    "type": "object",
  },
]
`;

exports[`SchemaResolver file resolver resolves directory 1`] = `
Array [
  Object {
    "$id": "http://supermodel.io/test/schemaorg/Action",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/Action",
    "allOf": Array [
      Object {
        "$ref": "http://supermodel.io/test/schemaorg/Thing",
      },
    ],
    "description": "An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.<br/><br/>

See also <a href=\\"http://blog.schema.org/2014/04/announcing-schemaorg-actions.html\\">blog post</a> and <a href=\\"http://schema.org/docs/actions.html\\">Actions overview document</a>.",
    "properties": Object {
      "error": Object {
        "$ref": "http://supermodel.io/test/schemaorg/properties/error",
      },
      "result": Object {
        "$ref": "http://supermodel.io/test/schemaorg/properties/result",
      },
    },
    "title": "Action",
    "type": "object",
  },
  Object {
    "$id": "http://supermodel.io/test/schemaorg/DataType",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/DataType",
    "description": "The basic data types such as Integers, Strings, etc.",
    "title": "DataType",
  },
  Object {
    "$id": "http://supermodel.io/test/schemaorg/Text",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/Text",
    "allOf": Array [
      Object {
        "$ref": "http://supermodel.io/test/schemaorg/DataType",
      },
    ],
    "description": "Data type: Text.",
    "title": "Text",
    "type": "string",
  },
  Object {
    "$id": "http://supermodel.io/test/schemaorg/Thing",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/Thing",
    "description": "The most generic type of item.",
    "properties": Object {
      "name": Object {
        "$ref": "http://supermodel.io/test/schemaorg/properties/name",
      },
    },
    "title": "Thing",
    "type": "object",
  },
  Object {
    "$id": "http://supermodel.io/test/schemaorg/properties/error",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/error",
    "description": "For failed actions, more information on the cause of the failure.",
    "oneOf": Array [
      Object {
        "$ref": "http://supermodel.io/test/schemaorg/Thing",
      },
    ],
    "title": "error",
  },
  Object {
    "$id": "http://supermodel.io/test/schemaorg/properties/name",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/name",
    "description": "The name of the item.",
    "oneOf": Array [
      Object {
        "$ref": "http://supermodel.io/test/schemaorg/Text",
      },
    ],
    "title": "name",
  },
  Object {
    "$id": "http://supermodel.io/test/schemaorg/properties/result",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/result",
    "description": "The result produced in the action. e.g. John wrote <em>a book</em>.",
    "oneOf": Array [
      Object {
        "$ref": "http://supermodel.io/test/schemaorg/Thing",
      },
    ],
    "title": "result",
  },
]
`;

exports[`SchemaResolver file resolver resolves single schema 1`] = `
Array [
  Object {
    "$id": "http://supermodel.io/test/schemaorg/Action",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/Action",
    "allOf": Array [
      Object {
        "$ref": "http://supermodel.io/test/schemaorg/Thing",
      },
    ],
    "description": "An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.<br/><br/>

See also <a href=\\"http://blog.schema.org/2014/04/announcing-schemaorg-actions.html\\">blog post</a> and <a href=\\"http://schema.org/docs/actions.html\\">Actions overview document</a>.",
    "properties": Object {
      "error": Object {
        "$ref": "http://supermodel.io/test/schemaorg/properties/error",
      },
      "result": Object {
        "$ref": "http://supermodel.io/test/schemaorg/properties/result",
      },
    },
    "title": "Action",
    "type": "object",
  },
  Object {
    "$id": "http://supermodel.io/test/schemaorg/DataType",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/DataType",
    "description": "The basic data types such as Integers, Strings, etc.",
    "title": "DataType",
  },
  Object {
    "$id": "http://supermodel.io/test/schemaorg/Text",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/Text",
    "allOf": Array [
      Object {
        "$ref": "http://supermodel.io/test/schemaorg/DataType",
      },
    ],
    "description": "Data type: Text.",
    "title": "Text",
    "type": "string",
  },
  Object {
    "$id": "http://supermodel.io/test/schemaorg/Thing",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/Thing",
    "description": "The most generic type of item.",
    "properties": Object {
      "name": Object {
        "$ref": "http://supermodel.io/test/schemaorg/properties/name",
      },
    },
    "title": "Thing",
    "type": "object",
  },
  Object {
    "$id": "http://supermodel.io/test/schemaorg/properties/error",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/error",
    "description": "For failed actions, more information on the cause of the failure.",
    "oneOf": Array [
      Object {
        "$ref": "http://supermodel.io/test/schemaorg/Thing",
      },
    ],
    "title": "error",
  },
  Object {
    "$id": "http://supermodel.io/test/schemaorg/properties/name",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/name",
    "description": "The name of the item.",
    "oneOf": Array [
      Object {
        "$ref": "http://supermodel.io/test/schemaorg/Text",
      },
    ],
    "title": "name",
  },
  Object {
    "$id": "http://supermodel.io/test/schemaorg/properties/result",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/result",
    "description": "The result produced in the action. e.g. John wrote <em>a book</em>.",
    "oneOf": Array [
      Object {
        "$ref": "http://supermodel.io/test/schemaorg/Thing",
      },
    ],
    "title": "result",
  },
]
`;

exports[`SchemaResolver http resolver resolves circular schema 1`] = `
Array [
  Object {
    "$id": "http://supermodel.io/test/Circular1",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Circular1 Schema",
    "type": "object",
  },
]
`;

exports[`SchemaResolver http resolver resolves layer 1`] = `Array []`;

exports[`SchemaResolver http resolver resolves single schema 1`] = `
Array [
  Object {
    "$id": "http://supermodel.io/test/schemaorg/Action",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/Action",
    "allOf": Array [
      Object {
        "$ref": "http://supermodel.io/test/schemaorg/Thing",
      },
    ],
    "description": "An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.<br/><br/>

See also <a href=\\"http://blog.schema.org/2014/04/announcing-schemaorg-actions.html\\">blog post</a> and <a href=\\"http://schema.org/docs/actions.html\\">Actions overview document</a>.",
    "properties": Object {
      "error": Object {
        "$ref": "http://supermodel.io/test/schemaorg/properties/error",
      },
      "result": Object {
        "$ref": "http://supermodel.io/test/schemaorg/properties/result",
      },
    },
    "title": "Action",
    "type": "object",
  },
  Object {
    "$id": "http://supermodel.io/test/schemaorg/DataType",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/DataType",
    "description": "The basic data types such as Integers, Strings, etc.",
    "title": "DataType",
  },
  Object {
    "$id": "http://supermodel.io/test/schemaorg/Text",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/Text",
    "allOf": Array [
      Object {
        "$ref": "http://supermodel.io/test/schemaorg/DataType",
      },
    ],
    "description": "Data type: Text.",
    "title": "Text",
    "type": "string",
  },
  Object {
    "$id": "http://supermodel.io/test/schemaorg/Thing",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/Thing",
    "description": "The most generic type of item.",
    "properties": Object {
      "name": Object {
        "$ref": "http://supermodel.io/test/schemaorg/properties/name",
      },
    },
    "title": "Thing",
    "type": "object",
  },
  Object {
    "$id": "http://supermodel.io/test/schemaorg/properties/error",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/error",
    "description": "For failed actions, more information on the cause of the failure.",
    "oneOf": Array [
      Object {
        "$ref": "http://supermodel.io/test/schemaorg/Thing",
      },
    ],
    "title": "error",
  },
  Object {
    "$id": "http://supermodel.io/test/schemaorg/properties/name",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/name",
    "description": "The name of the item.",
    "oneOf": Array [
      Object {
        "$ref": "http://supermodel.io/test/schemaorg/Text",
      },
    ],
    "title": "name",
  },
  Object {
    "$id": "http://supermodel.io/test/schemaorg/properties/result",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$source": "http://schema.org/result",
    "description": "The result produced in the action. e.g. John wrote <em>a book</em>.",
    "oneOf": Array [
      Object {
        "$ref": "http://supermodel.io/test/schemaorg/Thing",
      },
    ],
    "title": "result",
  },
]
`;
